Inputs:
- R1 zip file --> read 1 
- R2 zip file --> index 1 
- R3 zip file --> index 2 (reverse complement of index 1)
- R4 zip file --> read 2 

What the function should do: 
- For each index, generate a pair of files: 1 for read 1, 1 for read 2 
    - In each file, each record should have "@<record header><index1>-<index2>"
    - 48 files in total, 2 files for each index
- Generate 2 files for each undetermined (do not match the 24 known indexes or do not meet a quality score cutoff. in the case of 1 read not meeting the cutoff, you toss both) index-pairs 
- Generate 2 files with index-hopped read-pairs 
- Reports:
    - the number of read-pairs with properly matched indexes (per index-pair)
    - the number of read pairs with index-hopping observed
    - the number of read-pairs with unknown index(es)








PSEUDOCODE: 


def convert_phred(letter: str) -> int:
    '''Takes a single ASCII character (string) encoded in Phred+33 and
    returns the quality score value as an integer.'''
    return qscore
Input: I
Expected output: 40

def qual_score(letter: str) -> float:
    '''Returns the average quality score of a given sequence.''
    return average_q_score
Input: IDE
Expected output: 37

def reverse_complement(letter: str) -> str:
    '''Returns the reverse complement of a given sequence''
    return rc
Input: ATCCGGTA
Expected output: TACCGGAT


initialize library of indexes called index_library 
initialize table called filenames
initialize dictionary called index_matches_counts
initialize dictionary called index_hop_counts
initialize variable called index_unkown_counts and set to 0
initialize variable called qual_score_cutoff and set to a value of your choosing 

for each index in the library:
    store "<index>_R1" in filenames
    store "<index>_R2" in filenames
    store <index> in index_matches_counts with a value of 0 

for each index in the library:
    for every other index in the library: 
        store "<index>-<other index>" in index_hop_counts with a value of 0

store "non-matching_R1" and "non-matching_R2" in filenames
store "unknown_R1" and "unknown_R2" in filenames 

create and open all files in filenames and read every zip file:
    while True:
        initialize line_1_R1 as a string containing the next line in R1
        initialize line_2_R1 as a string containing the next line in R1
        initialize line_3_R1 as a string containing the next line in R1
        initialize line_4_R1 as a string containing the next line in R1

        initialize line_1_R2 as a string containing the next line in R2
        initialize line_2_R2 as a string containing the next line in R2
        initialize line_3_R2 as a string containing the next line in R2
        initialize line_4_R2 as a string containing the next line in R2

        initialize line_1_R3 as a string containing the next line in R3
        initialize line_2_R3 as a string containing the next line in R3
        initialize line_3_R3 as a string containing the next line in R3
        initialize line_4_R3 as a string containing the next line in R3

        initialize line_1_R4 as a string containing the next line in R4
        initialize line_2_R4 as a string containing the next line in R4
        initialize line_3_R4 as a string containing the next line in R4
        initialize line_4_R4 as a string containing the next line in R4
        
        if line_1_R1 and line_1_R2 and line_1_R3 and line_1_R4 is blank:
            break out of the while loop

        initialize index_R1 as <line_2_R2> 
        initialize index_R2 as <line_2_R3>
        initialize headerR1 as "<line_1_R1><index_R1>-<index_R2>"
        initialize headerR2 as "<line_1_R4><index_R1>-<index_R2>"
        
        initialize fileR1
        initialize fileR2

        if qual_score(line_4_R1) < qual_score_cutoff or qual_score(line_4_R4) < qual_score_cutoff 
        or <index_R1> not in index_library or <index_R2> not in index_library:
            set fileR1 equal to "unknown_R1"
            set fileR2 equal to "unkown_R2" 
            increment index_unkown_counts by 1
        else if <index_R1> not equal to reverse_complement(index_R2):
            set fileR1 equal to "non-matching_R1"
            set fileR2 equal to "non-matching_R2"
            increment "<index_R1>-<index_R2>" in index_hop_counts by 1
        else:
            set fileR1 equal to "<index_R1>_R1"
            set fileR2 equal to "<index_R2>_R2"
            increment <index_R1> in index_matches_counts by 1

        write to file "<fileR1>": "<headerR1> (newline)
                                    <line_2_R1> (newline)
                                    <line_3_R1> (newline)
                                    <line_4_R1> (newline)"
        write to file "<fileR2>": "<headerR2> (newline)
                                    <line_2_R2> (newline)
                                    <line_3_R2> (newline)
                                    <line_4_R2> (newline)"                                 

print "index uknown counts = <index_unkown_counts> (newline)"
print "(newline)"

print "index matches counts: (newline)"
for every index and value pair in index_hop_counts:
    print "<index> = <value> (newline)"
print "(newline)"

print "index hop counts: (newline)"
for every index and value pair in index_hop_counts:
    print "<index>-<other index> = <value> (newline)"
print "(newline)"

delete any of the created files that are empty
        
        
        

        
        
    



